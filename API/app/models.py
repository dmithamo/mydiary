"""
    Module defines the blueprint for creating an Entry object
"""


from datetime import datetime


class Entry:
    """
        Models an entry as an object with

        Properties :

            entry_id (autogenerated on initialization),
            entry_title,
            entry_body,
            entry_tags, and
            entry_timestamp (autogenerated on initialization)

        Methods :

            fetch_all_entries() - returns all entries in entries list,

            fetch_single_entry(entry_id) - returns entry with given
                entry_id,

            create_entry(*args) - creates an entry with the specified
                properties and appends the entry to entries list
                [*args == the Properties named above]

            edit_entry(entry_id, **kwargs) - modifies the values of the
                specified properties for the specified entry_id

            delete_entry(entry_id) - removes the specified entry from
                the list of entries
    """

    # Class variable to store all entries created
    entries = []

    def __init__(
            self, entry_title,
            entry_body, entry_tags
    ):
        """
            Initialize entry
        """
        self.entry_title = entry_title
        self.entry_body = entry_body
        self.entry_tags = entry_tags

        # Store autogenerated timestamp as a formatted str
        self.entry_timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        # Autogenerated entry_id - assigned by counting entries so far created
        self.entry_id = len(self.entries)

    def __repr__(self):
        """
            Define schematic for representing an entry.
            For experimentation in Terminal
        """
        return '< {} : {} >'.format(self.entry_id, self.entry_title)

    @classmethod
    def get_all_entries(cls):
        """
            Retrieve the entire collection of entries
        """
        return cls.entries

    @classmethod
    def get_single_entry(cls, entry_id):
        """
            Retrieve entry whose entry.entry_id == entry_id from the collection of
            entries
        """

        # Retrieve list of all entries
        # Check if any of the entry_ids matches id, and return that entry
        # If no match, return None
        result = None
        for entry in cls.get_all_entries():
            if entry.entry_id == entry_id:
                result = entry
                break

        return result
